definitions:
  auth.LoginRequestDto:
    properties:
      password:
        type: string
      phone:
        type: string
    required:
    - password
    - phone
    type: object
  auth.RegisterRequestDto:
    properties:
      age:
        minimum: 18
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        minLength: 8
        type: string
      sex_id:
        type: integer
    required:
    - age
    - name
    - password
    - phone
    - sex_id
    type: object
  model.Interest:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  profile.GetInfoResponseDto:
    properties:
      age:
        type: integer
      attitude_to_alcohol:
        $ref: '#/definitions/profile.ReferenceDto'
      attitude_to_smoking:
        $ref: '#/definitions/profile.ReferenceDto'
      avatar:
        type: string
      bio:
        type: string
      children:
        type: boolean
      city:
        type: string
      education:
        $ref: '#/definitions/profile.ReferenceDto'
      height:
        type: integer
      id:
        type: integer
      interests:
        items:
          $ref: '#/definitions/profile.ReferenceDto'
        type: array
      name:
        type: string
      phone:
        type: string
      photo:
        items:
          type: string
        type: array
      sex:
        $ref: '#/definitions/profile.ReferenceDto'
      status:
        $ref: '#/definitions/profile.ReferenceDto'
      type_of_dating:
        $ref: '#/definitions/profile.ReferenceDto'
      worldview:
        $ref: '#/definitions/profile.ReferenceDto'
      zodiac_sign:
        $ref: '#/definitions/profile.ReferenceDto'
    type: object
  profile.ReferenceDto:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  profile.UpdateInfoRequestDto:
    properties:
      age:
        type: integer
      attitude_to_alcohol_id:
        type: integer
      attitude_to_smoking_id:
        type: integer
      bio:
        type: string
      children:
        type: boolean
      city:
        type: string
      education_id:
        type: integer
      height:
        type: integer
      name:
        type: string
      sex_id:
        type: integer
      type_of_dating_id:
        type: integer
      worldview_id:
        type: integer
      zodiac_sign_id:
        type: integer
    type: object
  profile.UpdateInterestRequestDto:
    properties:
      interests:
        items:
          type: integer
        type: array
    required:
    - interests
    type: object
host: localhost:8081
info:
  contact:
    email: ваш.email@example.com
    name: Ваше Имя
  description: 'Это серверная часть для приложения знакомств. Все эндпоинты, требующие
    авторизации, ожидают JWT токен в заголовке ''Authorization: Bearer {token}''.'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API для Сервиса Знакомств
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает JWT токен в теле ответа
        как обычный текст (plain text)
      parameters:
      - description: Данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequestDto'
      produces:
      - text/plain
      responses:
        "200":
          description: eyJhbGciOiJIU...
          schema:
            type: string
      summary: Вход пользователя в систему
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя и возвращает JWT токен для доступа
        к защищенным ресурсам
      parameters:
      - description: Данные для регистрации
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Регистрация нового пользователя
      tags:
      - Authentication
  /photo/{id}/all:
    get:
      description: Возвращает JSON-массив со строками-ссылками на все фотографии пользователя.
      parameters:
      - description: ID Пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Массив ссылок на фотографии
          schema:
            items:
              type: string
            type: array
        "400":
          description: Некорректный ID пользователя
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получить все ссылки на фото пользователя
      tags:
      - Photo
  /photo/{uuid}:
    get:
      description: Возвращает бинарные данные фотографии по её UUID
      parameters:
      - description: UUID фотографии
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: Бинарные данные файла фотографии
          schema:
            type: file
        "400":
          description: Некорректный запрос (UUID не указан)
          schema:
            type: string
        "404":
          description: Фотография не найдена
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получить файл фотографии
      tags:
      - Photo
  /profile:
    get:
      consumes:
      - application/json
      description: Возвращает данные профиля текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Информация о профиле
          schema:
            $ref: '#/definitions/profile.GetInfoResponseDto'
        "404":
          description: Пользователь не найден
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получение информации о профиле
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      description: Возвращает данные профиля текущего пользователя
      parameters:
      - description: Данные для обновления
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/profile.UpdateInfoRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Информация о профиле
          schema:
            $ref: '#/definitions/profile.GetInfoResponseDto'
      security:
      - ApiKeyAuth: []
      summary: Обновить данные о профиле
      tags:
      - Profile
  /profile/avatar:
    get:
      description: Возвращает ID текущего аватара авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: ID аватара пользователя
          schema:
            type: string
        "401":
          description: Unauthorized - пользователь не авторизован
          schema:
            type: string
        "404":
          description: Not Found - аватар не установлен
          schema:
            type: string
        "500":
          description: Internal Server Error - ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получить аватар пользователя
      tags:
      - Profile
  /profile/interests:
    put:
      consumes:
      - application/json
      description: Возвращает данные профиля текущего пользователя
      parameters:
      - description: Данные для обновления
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/profile.UpdateInterestRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Список интересов
          schema:
            items:
              $ref: '#/definitions/model.Interest'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Обновить данные об интересах
      tags:
      - Profile
  /profile/photo/{photoId}:
    delete:
      consumes:
      - application/json
      description: Удаляет фотографию, принадлежащую текущему авторизованному пользователю.
      parameters:
      - description: UUID фотографии для удаления
        in: path
        name: photoId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content - фотография успешно удалена
          schema:
            type: string
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "404":
          description: Фотография не найдена или нет прав на удаление
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Удаление фотографии пользователя
      tags:
      - Profile
  /profile/photo/change-avatar/{photoId}:
    patch:
      consumes:
      - application/json
      description: Устанавливает указанную фотографию как аватар пользователя. Только
        фотографии, принадлежащие пользователю, могут быть установлены как аватар.
      parameters:
      - description: UUID фотографии для установки как аватар
        in: path
        name: photoId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ID нового аватара
          schema:
            type: string
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "404":
          description: Фотография не найдена или не принадлежит пользователю
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Обновление аватара пользователя
      tags:
      - Profile
  /profile/photos:
    post:
      consumes:
      - multipart/form-data
      description: Загружает файл фотографии для текущего пользователя. Принимает
        multipart/form-data с ключом "photo".
      parameters:
      - description: Файл фотографии для загрузки
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - text/plain
      responses:
        "201":
          description: UUID созданной фотографии
          schema:
            type: string
        "400":
          description: Некорректный запрос (например, файл не предоставлен)
          schema:
            type: string
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "404":
          description: Пользователь не найден
          schema:
            type: string
        "409":
          description: Достигнут лимит на количество фотографий
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Добавить фотографию в профиль
      tags:
      - Profile
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
